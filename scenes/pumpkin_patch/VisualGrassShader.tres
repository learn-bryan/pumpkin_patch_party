[gd_resource type="VisualShader" load_steps=24 format=2]

[sub_resource type="VisualShaderNodeScalarOp" id=1]
default_input_values = [ 0, 0.0, 1, 1.0 ]
operator = 2

[sub_resource type="VisualShaderNodeColorConstant" id=2]
constant = Color( 0.213963, 0.757813, 0.0401558, 1 )

[sub_resource type="VisualShaderNodeColorConstant" id=3]
constant = Color( 0.151625, 0.430664, 0.111762, 1 )

[sub_resource type="VisualShaderNodeVectorInterp" id=4]

[sub_resource type="Gradient" id=5]

[sub_resource type="GradientTexture" id=6]
gradient = SubResource( 5 )

[sub_resource type="VisualShaderNodeTexture" id=7]
texture = SubResource( 6 )
texture_type = 2

[sub_resource type="VisualShaderNodeVectorCompose" id=8]

[sub_resource type="VisualShaderNodeVectorDecompose" id=9]

[sub_resource type="VisualShaderNodeInput" id=10]
input_name = "uv"

[sub_resource type="VisualShaderNodeTransformDecompose" id=11]

[sub_resource type="VisualShaderNodeScalarOp" id=12]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=13]
default_input_values = [ 0, 0.0, 1, 0.2 ]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=14]
default_input_values = [ 0, 0.0, 1, 1.0 ]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=15]
default_input_values = [ 0, 1.0, 1, 1.0 ]

[sub_resource type="VisualShaderNodeScalarOp" id=16]
default_input_values = [ 0, 0.0, 1, 1.0 ]

[sub_resource type="VisualShaderNodeInput" id=17]
input_name = "vertex"

[sub_resource type="VisualShaderNodeVectorDecompose" id=18]

[sub_resource type="VisualShaderNodeScalarOp" id=19]

[sub_resource type="VisualShaderNodeVectorCompose" id=20]

[sub_resource type="VisualShaderNodeScalarFunc" id=21]
function = 0

[sub_resource type="VisualShaderNodeInput" id=22]
input_name = "time"

[sub_resource type="VisualShaderNodeInput" id=23]
input_name = "world"

[resource]
code = "shader_type spatial;
render_mode cull_disabled, diffuse_burley, specular_disabled, unshaded;

uniform sampler2D tex_frg_6 : hint_normal;



void vertex() {
// Input:8
	float n_out8p0 = TIME;

// Input:9
	mat4 n_out9p0 = WORLD_MATRIX;

// TransformDecompose:10
	vec3 n_out10p0 = n_out9p0[0].xyz;
	vec3 n_out10p1 = n_out9p0[1].xyz;
	vec3 n_out10p2 = n_out9p0[2].xyz;
	vec3 n_out10p3 = n_out9p0[3].xyz;

// ScalarOp:11
	float n_out11p0 = n_out8p0 * dot(n_out10p0, vec3(0.333333, 0.333333, 0.333333));

// ScalarFunc:7
	float n_out7p0 = sin(n_out11p0);

// ScalarOp:12
	float n_in12p1 = 0.20000;
	float n_out12p0 = n_out7p0 * n_in12p1;

// Input:2
	vec3 n_out2p0 = VERTEX;

// VectorDecompose:4
	float n_out4p0 = n_out2p0.x;
	float n_out4p1 = n_out2p0.y;
	float n_out4p2 = n_out2p0.z;

// ScalarOp:14
	float n_in14p0 = 1.00000;
	float n_out14p0 = n_in14p0 + n_out4p1;

// ScalarOp:13
	float n_out13p0 = n_out12p0 * n_out14p0;

// ScalarOp:5
	float n_out5p0 = n_out13p0 + n_out4p0;

// ScalarOp:15
	float n_in15p1 = 1.00000;
	float n_out15p0 = n_out4p1 + n_in15p1;

// VectorCompose:6
	vec3 n_out6p0 = vec3(n_out5p0, n_out15p0, n_out4p2);

// Output:0
	VERTEX = n_out6p0;

}

void fragment() {
// Color:3
	vec3 n_out3p0 = vec3(0.213963, 0.757813, 0.040156);
	float n_out3p1 = 1.000000;

// Color:4
	vec3 n_out4p0 = vec3(0.151625, 0.430664, 0.111762);
	float n_out4p1 = 1.000000;

// Input:9
	vec3 n_out9p0 = vec3(UV, 0.0);

// VectorDecompose:8
	float n_out8p0 = n_out9p0.x;
	float n_out8p1 = n_out9p0.y;
	float n_out8p2 = n_out9p0.z;

// VectorCompose:7
	vec3 n_out7p0 = vec3(n_out8p1, n_out8p0, n_out8p2);

// Texture:6
	vec4 tex_frg_6_read = texture(tex_frg_6, n_out7p0.xy);
	vec3 n_out6p0 = tex_frg_6_read.rgb;
	float n_out6p1 = tex_frg_6_read.a;

// ScalarOp:10
	float n_in10p1 = 1.00000;
	float n_out10p0 = dot(n_out6p0, vec3(0.333333, 0.333333, 0.333333)) * n_in10p1;

// VectorMix:5
	vec3 n_out5p0 = mix(n_out3p0, n_out4p0, vec3(n_out10p0));

// Output:0
	ALBEDO = n_out5p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -1300.67, -654.5 )
modes/cull = 2
modes/diffuse = 3
modes/specular = 4
flags/unshaded = true
nodes/vertex/0/position = Vector2( 1660, -20 )
nodes/vertex/2/node = SubResource( 17 )
nodes/vertex/2/position = Vector2( -1560, -120 )
nodes/vertex/4/node = SubResource( 18 )
nodes/vertex/4/position = Vector2( -1300, -120 )
nodes/vertex/5/node = SubResource( 19 )
nodes/vertex/5/position = Vector2( 920, -380 )
nodes/vertex/6/node = SubResource( 20 )
nodes/vertex/6/position = Vector2( 1092.5, -48 )
nodes/vertex/7/node = SubResource( 21 )
nodes/vertex/7/position = Vector2( 60, -820 )
nodes/vertex/8/node = SubResource( 22 )
nodes/vertex/8/position = Vector2( -1160, -840 )
nodes/vertex/9/node = SubResource( 23 )
nodes/vertex/9/position = Vector2( -1540, -740 )
nodes/vertex/10/node = SubResource( 11 )
nodes/vertex/10/position = Vector2( -1300, -740 )
nodes/vertex/11/node = SubResource( 12 )
nodes/vertex/11/position = Vector2( -200, -880 )
nodes/vertex/12/node = SubResource( 13 )
nodes/vertex/12/position = Vector2( 320, -780 )
nodes/vertex/13/node = SubResource( 14 )
nodes/vertex/13/position = Vector2( 620, -680 )
nodes/vertex/14/node = SubResource( 15 )
nodes/vertex/14/position = Vector2( 300, -480 )
nodes/vertex/15/node = SubResource( 16 )
nodes/vertex/15/position = Vector2( 600, -140 )
nodes/vertex/connections = PoolIntArray( 2, 0, 4, 0, 6, 0, 0, 0, 4, 2, 6, 2, 5, 0, 6, 0, 9, 0, 10, 0, 11, 0, 7, 0, 7, 0, 12, 0, 4, 0, 5, 1, 12, 0, 13, 0, 13, 0, 5, 0, 14, 0, 13, 1, 4, 1, 14, 1, 4, 1, 15, 0, 15, 0, 6, 1, 8, 0, 11, 0, 10, 0, 11, 1 )
nodes/fragment/0/position = Vector2( 1640, 120 )
nodes/fragment/3/node = SubResource( 2 )
nodes/fragment/3/position = Vector2( 760, 160 )
nodes/fragment/4/node = SubResource( 3 )
nodes/fragment/4/position = Vector2( 760, 340 )
nodes/fragment/5/node = SubResource( 4 )
nodes/fragment/5/position = Vector2( 1040, 340 )
nodes/fragment/6/node = SubResource( 7 )
nodes/fragment/6/position = Vector2( 700, 540 )
nodes/fragment/7/node = SubResource( 8 )
nodes/fragment/7/position = Vector2( 360, 680 )
nodes/fragment/8/node = SubResource( 9 )
nodes/fragment/8/position = Vector2( 0, 680 )
nodes/fragment/9/node = SubResource( 10 )
nodes/fragment/9/position = Vector2( -160, 480 )
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( 1060, 680 )
nodes/fragment/connections = PoolIntArray( 3, 0, 5, 0, 4, 0, 5, 1, 5, 0, 0, 0, 7, 0, 6, 0, 9, 0, 8, 0, 8, 2, 7, 2, 8, 0, 7, 1, 8, 1, 7, 0, 10, 0, 5, 2, 6, 0, 10, 0 )
